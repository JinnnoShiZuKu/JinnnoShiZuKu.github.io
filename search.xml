<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python学习之路</title>
      <link href="/2023/04/03/Python%E5%AD%A6%E4%B9%A0%E8%B7%AF/"/>
      <url>/2023/04/03/Python%E5%AD%A6%E4%B9%A0%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="神乃シズクのPython学习之路"><a href="#神乃シズクのPython学习之路" class="headerlink" title="神乃シズクのPython学习之路"></a>神乃シズクのPython学习之路</h2><img src="/img/Python/Python.png"><p>Python常用数据结构<br>    列表<br>        定义、创建和删除<br>            创建<br>                a_list = []\nb_list = [20, “张三”, 177.6]\nc_list = list(range(10))\nprint(a_list)\nprint(b_list)\nprint(c_list)\n\n\n\n\n\n<br>                    输出结果<br>                        直接用[]创建<br>                        使用list()函数将元组、range对象、字符串转换为列表<br>            删除<br>                通过del命令删除列表<br>                    a_list = [1,2,3]\ndel a_list<br>        元素的访问<br>            创建列表时，将会开辟一块连续空间<br>                正向索引<br>                    0，1，2，3…<br>                反向索引<br>                    -1，-2，-3，-4…<br>                a_list = list(range(2,10))\nprint(a_list)\nprint(a_list[6])\nprint(a_list[-2])\nls = [2022,”bat”,[10,’软件工程’],2023]\nprint(ls[2][-1][0])<br>                    输出结果<br>        切片操作<br>            a_list = list(range(1,10))\nprint(a_list[::1])\nprint(a_list[:1:])\nprint(a_list[1::])\nprint(a_list[::-1])\nprint(a_list[:-1:])\nprint(a_list[-1::])\nprint(a_list[::])<br>                输出结果<br>                    输入代码解释<br>        内容的修改操作<br>            对单个元素进行修改<br>                a_list = list(range(1,10))\na_list[2]=”ABC”\nprint(a_list)\na_list[4]=[11,12,13,14]\nprint(a_list)<br>                    输出结果<br>            对某个连续区域进行修改<br>                a_list=list(range(1,10))\na_list[1:6]=[15,20,25,45,80]\nprint(a_list)<br>                    输出结果<br>                a_list=list(range(1,10))\na_list[1:3]=[15,20,25,45,80]\nprint(a_list)<br>                    输出结果<br>                a_list = list(range(1, 10))\na_list[1:6:2] = [15,20,25]\nprint(a_list)<br>                    输出结果<br>        常见方法<br>            index(object)<br>                获取列表中某个对象第一次出现的位置，不存在时报错ValueError<br>                    a_list=[3,5,7,3,6,2,9,6,8,4,3]\nprint(a_list.index(6))\nprint(a_list.index(6,5,-1))<br>                        输出结果<br>                        index（value,start,end）<br>            count(object)<br>                统计列表中某个对象出现的次数，不存在时返回0<br>                    a_list=[3,5,7,3,6,2,9,6,8,4,3]\nprint(a_list.count(6))<br>                        输出结果<br>            append(object)<br>                在列表的末尾添加一个对象<br>                    a_list=[3,5,7,3,6,2,9,6,8,4,3]\na_list.append([33,44,55])\nprint(a_list)<br>                        输出结果<br>            extend(iterable)<br>                将一个可迭代对象合并到列表中去，注意和append()方法的区别<br>                    a_list=[3,5,7,3,6,2,9,6,8,4,3]\na_list.extend([33,44,55])\nprint(a_list)<br>                        输出结果<br>            insert(index, object)<br>                在列表的指定位置插入一个元素，该位置及后面的元素依次往后移动<br>                    a_list=[3,5,7,3,6,2,9,6,8,4,3]\na_list.insert(2,”ABC”)\nprint(a_list)<br>                        输出结果<br>            sort(key, reverse)<br>                对列表中的元素进行排序，前提是元素之间可比较，否则会报错，默认为升序  注意: sort()方法为永久性排序。<br>                    a_list=[3,5,7,3,6,2,9,6,8,4,3]\na_list.sort(reverse=True)\nprint(a_list)<br>                        输出结果<br>            sorted()<br>                a_list = [3,5,7,3,6,2,9,6,8,4,3]\nb_list = sorted(a_list)\nprint(“a_list:”, a_list)\nprint(“b_list:”, b_list)<br>                    输出结果<br>            pop([index])<br>                删除列表中指定位置的元素，默认删除最后一个，并返回删除的元素<br>                    a_list = [3,5,7,3,6,2,9,6,8,4,3]\nprint(a_list)\nprint(a_list.pop()) # 删除最后一个元素\nprint(a_list)\nprint(a_list.pop(1)) # 删除第2个元素\nprint(a_list)<br>                        输出结果<br>            remove(object)<br>                删除列表中第一次出现的指定元素<br>                    a_list = [3,5,7,3,6,2,9,6,8,4,3]\nprint(a_list)\nprint(a_list.remove(7))\nprint(a_list)<br>                        输出结果<br>            reverse()<br>                将列表进行逆序<br>                    a_list = [3,5,7,3,6,2,9,6,8,4,3]\nprint(a_list)\na_list.reverse()\nprint(a_list)<br>                        输出结果<br>            reversed()<br>                a_list = [3,5,7,3,6,2,9,6,8,4,3]\nprint(a_list)\n# reversed()生成一个新的迭代器\nb_list = reversed(a_list)\nprint(a_list)\n# 使用list函数转换新迭代器\nprint(list(b_list))<br>                    输出结果<br>            clear()<br>                清空列表内容<br>                    a_list = [3,5,7,3,6,2,9,6,8,4,3]\nprint(a_list)\na_list.clear()\nprint(a_list)<br>                        输出结果<br>            copy()<br>                将列表内容复制一份，是一种浅拷贝<br>                    a_list = [3,5,7,3,6,2,9,6,8,4,3]\nb_list = a_list.copy()\nprint(a_list)\na_list[1]=”ABC”\nprint(a_list)\nprint(b_list)<br>                        输出结果<br>        常见操作<br>            len(列表)<br>                获取列表中元素的个数<br>            max(列表)<br>                获取列表中最大的元素，前提是列表中元素可比较<br>            min(列表)<br>                获取列表中最小的元素，前提是列表中元素可比较<br>            sum(列表)<br>                对列表中的元素进行求和，前提是列表中元素可执行加法运算<br>            reversed(列表)<br>                将列表进行逆序，返回一个可迭代对象<br>            sorted(列表，key, reverse)<br>                对列表中的元素进行排序，返回一个新列表。前提是元素之间可比较，否则会报错，默认为升序<br>            列表1 + 列表2<br>                实现两个列表的合并，并返回一个新的列表<br>            列表 * 整数<br>                将列表中的内容复制若干份，并返回一个新的列表<br>            enumerate(列表)<br>                生成一个枚举对象，每个元素为索引和值形成的元组<br>                    school_list = [‘软件与物联网工程学院’, ‘信息管理学院’, ‘统计学院’, ‘虚拟现实产业学院’]\nprint(school_list)\nb_list = list(enumerate(school_list))\nprint(b_list)\nfor index, school_name in enumerate(school_list):\n    print(index, school_name)<br>                        输出结果<br>            zip(列表1, 列表2)<br>                生成一个zip对象，每个元素为列表中对应位置元素形成的元组<br>                    names = [‘张军’, ‘李华’, ‘王芳’, ‘匡明’]\nstu_no = [‘0001’, ‘0002’, ‘0003’]\ntalls = [168, 173, 166]\nstu_list = zip(stu_no, names, talls)\nfor name, no, tall in stu_list:\n    print(“%s: %s, %d cm.” %(no, name, tall))<br>                        输出结果<br>                            当序列长度不同时, 函数zip()将在最短的序列用完后停止拼接。<br>        推导式<br>            列表推导式利用已有列表快速生成满足特定需求的列表。列表推导式在逻辑上相当于一个循环，只是形式更加简洁。<br>    元组<br>        定义、创建和删除<br>            定义<br>                元组属于不可变序列，一旦创建，不可修改里面的元素。元组中元素放在一对圆括号“()”中，并用逗号分隔，元素类型可以不同。<br>            创建<br>                直接通过一对圆括号创建元组对象。<br>                使用tuple()函数将列表、range对象、字符串或其他类型的可迭代对象转换为元组。<br>            删除<br>                当不再使用时，可通过del命令删除元组，删除后不可再调用<br>                    del d_tuple\nprint(d_tuple)\n\n<br>                        NameError: name ‘d_tuple’ is not defined<br>        元组和列表的联系与区别<br>            元组和列表都属于可迭代对象，支持索引和切片操作<br>            支持重复运算（<em>）和合并运算（+）\n\n\n<br>            支持一些常见的序列处理函数，例如 len()、max()、min() 等\n\n<br>            二者之间可相互转化，可使用tuple()将列表转化为元组，list()将元组转化为列表<br>        生成器推导式<br>    字符串<br>        字符串是由字符组成的一个不可变序列，和元组作用类似，也支持索引、切片、重复、合并等操作。Python中统一了“字符”和“字符串”的概念，字符串的内容放在一对引号中，可以是一对单引号、双引号或三引号。<br>        字符串和元组的主要区别<br>            元组的元素可以是各种各样的数据类型（整形、浮点型、字符类型等） 字符串的每个元素都是字符<br>        字符串的创建<br>            直接通过一对引号创建字符串对象（对于一些特殊字符可使用转义字符）<br>                a_str=”hello”\nb_str=””<br>            使用str()函数将其他类型对象转化为字符串对象。<br>                c_str=str()\nd_str=str(20)\ne_str=str([1,2,3])<br>        字符表的常见方法及作用<br>            index(子串，起点，终点)<br>                在区域中查找子串，不存在时报错<br>            count(子串, 起点, 终点)<br>                统计指定区域中子串出现的次数，不存在时返回0<br>            split(分隔符, 最多分割次数)<br>                按照分隔符对字符串进行分割，返回结果列表<br>            lower()、upper()<br>                将字符串中所有字母转化为小（大）写字母，生成一个新字符串<br>            swapcase()<br>                转变字符串中所有字母的大小写，生成一个新字符串<br>            replace(旧字符, 新字符, 次数)<br>                替换字符串中的指定元素，可指定替换次数，默认替换所有<br>            join(可迭代对象)<br>                用字符串将可迭代对象中的多个元素拼接起来<br>            startswith(字符串, 起点, 终点)<br>                判断字符串的指定区域是否以指定的字符串开始，结果为True或False<br>            endswith(字符串, 起点, 终点)<br>                判断字符串的指定区域是否以指定的字符串结束，结果为True或False<br>            center(宽度, 填充字符)<br>                指定字符串显示宽度，内容居中显示，左右两边填充指定字符<br>            strip(字符)<br>                去除字符串前后的字符，默认去除前后空白<br>            isdigit()<br>                判断字符串中所有字符是否都为数字<br>            isalpha()<br>                判断字符串中所有字符是否都为字母，广义上的字母<br>            isalnum()<br>                判断字符串中所有字符是否都为数字或字母<br>            isidentifier()<br>                判断字符串是否为合法标识符<br>    集合<br>        集合的定义、创建和删除<br>            集合的定义<br>                列表、元组、字符串属于序列, 它们的元素都是有顺序的, 可以通过索引访问元素, 也可以支持切片操作, 元素是可以重复的。\n集合：不能存在重复元素。\n\n<br>            集合的创建<br>                直接通过一对大括号包裹元素创建集合对象<br>                使用set()函数将列表、range对象、字符串或其他类型的可迭代对象转换为集合，此时会删除其中的重复元素。<br>            集合的删除<br>                del c_set\n<br>        集合的常用方法<br>            add(元素)<br>                向集合中添加一个元素，元素为不可变类型，不能是列表、集合等可变类型，如果该元素已存在则没什么变化<br>            update(可迭代对象)<br>                将可迭代对象中的元素依次添加到集合中去，去除重复元素<br>            copy()<br>                将集合复制一份<br>            pop()<br>                随机删除一个元素，并返回删除的元素<br>                    a_set= {1,8,5,”A”,9}\nb_set=a_set.copy()\nprint(b_set.pop())\nprint(a_set)\nprint(b_set)<br>                        输出结果<br>            remove(元素)<br>                从集合中删除某个元素，如果该元素不存在，则抛出错误KeyError<br>                    a_set= {1,8,5,”A”,9}\nb_set=a_set.copy()\nprint(b_set.remove(8))\nprint(a_set)\nprint(b_set)<br>                        输出结果<br>            discard(元素)<br>                从集合中删除某个元素，如果该元素不存在，则什么都不做<br>                    a_set= {1,8,5,”A”,9}\nb_set=a_set.copy()\nprint(b_set.discard(8))\nprint(b_set.discard(6))\nprint(a_set)\nprint(b_set)<br>                        输出结果<br>            clear()<br>                清空集合的内容<br>                    a_set= {1,8,5,”A”,9}\nb_set=a_set.copy()\nb_set.clear()\nprint(a_set)\nprint(b_set)<br>                        输出结果<br>        集合运算<br>            交集<br>                集合A和集合B的交集由既属于A又属于B的元素构成<br>                    集合A &amp; 集合B\n集合A. intersection(集合B)<br>            并集<br>                集合A和集合B的并集由属于A或属于B的元素构成<br>                    集合A | 集合B\n集合A. union(集合B)<br>            差集<br>                集合A和集合B的差集由属于A但不属于B的元素构成<br>                    集合A - 集合B  \n集合A. difference(集合B)<br>            对称差集<br>                集合A和集合B的对称差集由A和B的差集或B和A的差集组成<br>                    集合A ^ 集合B\n集合A.symmetric_difference(集合B)<br>            子集判断<br>                判断集合A是否为集合B的子集<br>                    集合A.issubset(集合B)\n集合A &lt;= 集合B<br>            父集判断<br>                判断集合A是否为集合B的父集<br>                    集合A.issuperset(集合B)\n集合A &gt;= 集合B<br>        集合推导式<br>            集合推导式写法类似于列表推导式，只是用一对大括号表示，而不是一对中括号。同时会去除结果中的重复元素。<br>                a_set = {x</em>x for x in range(-5, 5)}\nb_set = {x<em>2 for x in [“A”, “B”, “A”, 2, 4, 2]}\nc_set = {x</em>2 for x in [“A”, “B”, “A”, 2, 4, 2] if str(x).isdigit()}\nd_set = {x for x in [2, 4, 6, 8] if x in [1, 3, 6, 4]}\n# 求交集\ne_set = {x for x in [2, 4, 6, 8] if x not in [1, 3, 6, 4]}\n# 求差集\nf_set = {x + y for x in [2, 4, 6, 8] for y in [1, 3, 5]}\n# 求并集\nprint(a_set)print(b_set)print(c_set)print(d_set)print(e_set)print(f_set)<br>                    输出结果<br>    字典<br>        字典的定义、创建<br>            定义<br>                字典是一种映射类型，由若干”键(key) : 值(value)”组成\n“键”和“值”之间用冒号隔开，所有“键值对”放在一对大括号“{ }”内，并用逗号分隔。其中“键”必须为不可变类型，在同一个字典中\n“键”必须是唯一的，但“值”可以重复。<br>            创建<br>                直接通过一对大括号包裹键值对创建字典对象<br>                使用dict()函数创建字典对象<br>        字典元素的访问<br>            字典是无序的，因此不支持索引、切片等操作。主要通过字典对象[键]获取对应的值。此外，字典还提供了获取所有键值对、所有键、所有值的方法。<br>                a_dict={“姓名”:”张三”,”年龄”:20,”体重”:172,”身高”:172}\nprint(“遍历key值1：”,end= “ “)\nfor key in a_dict:\n    print(a_dict[key],end= “ “)\nprint(“\\n遍历key值2：”,end= “ “)\nfor key in a_dict.keys():\n    print(a_dict[key],end= “ “)\nprint(“\\n遍历value值：”,end= “ “)\nfor value in a_dict.values():\n    print(value,end=” “)\nprint(“\\n遍历item值：”,end= “ “)\nfor item in a_dict.items():\n    print(item,end=” “)\nprint(“\\n遍历键值对1：”,end= “ “)\nfor key,value in a_dict.items():\n    print(key,”:”,value,end= “ “)\nprint(“\\n遍历键值对2：”,end= “ “)\nfor (key,value) in a_dict.items():\n    print(key,”:”,value,end=” “)<br>                    输出结果<br>        字典的常见方法<br>        字典推导式<br>        字典排序</p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>交互设计作品集</title>
      <link href="/2023/03/14/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1%E4%BD%9C%E5%93%81%E9%9B%86/"/>
      <url>/2023/03/14/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1%E4%BD%9C%E5%93%81%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="神乃シズクの交互设计作品集"><a href="#神乃シズクの交互设计作品集" class="headerlink" title="神乃シズクの交互设计作品集"></a>神乃シズクの交互设计作品集</h2>]]></content>
      
      
      <categories>
          
          <category> 交互设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工业设计史-设计的萌芽阶段</title>
      <link href="/2023/02/28/%E5%B7%A5%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%8F%B2-%E6%89%8B%E5%B7%A5%E8%89%BA%E8%AE%BE%E8%AE%A1%E9%98%B6%E6%AE%B5/"/>
      <url>/2023/02/28/%E5%B7%A5%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%8F%B2-%E6%89%8B%E5%B7%A5%E8%89%BA%E8%AE%BE%E8%AE%A1%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="工业设计史-设计的萌芽阶段"><a href="#工业设计史-设计的萌芽阶段" class="headerlink" title="工业设计史-设计的萌芽阶段"></a>工业设计史-设计的萌芽阶段</h2><p>工业设计史<br>    设计的萌芽阶段<br>        设计概念的产生<br>            最早的石器是在非洲的坦桑尼亚发现的（300w-50w年）<br>            设计定义：设计是人类为了实现某种特定的目的而进行的一项创造性活动<br>        生存设计<br>            抵御自然灾害和野兽的攻击<br>                三头——石头、木头、骨头<br>                澳大利亚土著飞镖<br>                格陵兰人兽皮筏</p>]]></content>
      
      
      <categories>
          
          <category> 工业设计史 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>交互设计-超越人机交互笔记</title>
      <link href="/2023/02/28/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/02/28/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 交互设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工业设计史-设计的萌芽阶段</title>
      <link href="/2023/02/28/%E5%B7%A5%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%8F%B2-%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%90%8C%E8%8A%BD%E9%98%B6%E6%AE%B5/"/>
      <url>/2023/02/28/%E5%B7%A5%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%8F%B2-%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%90%8C%E8%8A%BD%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="工业设计史-设计的萌芽阶段"><a href="#工业设计史-设计的萌芽阶段" class="headerlink" title="工业设计史-设计的萌芽阶段"></a>工业设计史-设计的萌芽阶段</h2><pre><code>手工艺设计阶段    最早通过化学变化人工改变物质的创造活动——制陶、炼铜        中国手工艺设计            陶器                通过火的应用，改变细腻的黄土内在性质\n并掺入沙子防止高温爆裂。                    卷唇圜（yuán）底盆                        小口尖底瓶            青铜器                铜史人类最早冶炼和使用的金属，铜和锡制成合金青铜。青铜在我国商代得以广泛应用                    河北满城汉墓出土的长信宫灯            漆器                汉代漆器技艺达到顶峰                    长沙马王堆汉墓云纹漆鼎                        “轪侯家”云龙纹大漆盘                            长沙马王堆汉墓双层九子漆奁（lián）            瓷器                中国是瓷器的故乡，早在商代就出现了原始的瓷器，在宋代达到了鼎盛时期。                    安徽宿松出土的宋代影青执壶                        明代江西景德镇宣德青花一束莲纹大盘            明代家具                凳椅类                几案类                床榻类                台架类                屏座类                特色                    注意材料质地，多用硬质树种                    充分提现木材自然纹理色泽，不加油漆                    注意家具造型，采用木构架的结构        国外手工艺设计            古埃及的设计                世界最大的金字塔——胡夫金字塔                阿蒙神庙                石制品——生产工具、日用家居、器皿、装饰品            古希腊的设计                手工业 镀金、雕刻、上漆、抛光、镶接                家具代表                    克里斯姆斯Klismos的靠椅                手工制品——红、黑两色陶瓶（陶器）            古罗马的设计                陶器从轮制变青铜翻模技术，这种生产方式已体现出工业化生产的特点，使产品的设计与生产分离开来                    家具                        庞贝遗迹的铜质家居                    角斗场                    万神庙            欧洲中世纪的设计                在中世纪的手工生产中也存在着高度的标准化                    英国陶业指定的标准形态案例                    最高成就——哥特式教堂                        巴黎圣母院（建于1163年）            文艺复兴后的设计                中心思想——人文主义                    文艺复兴三杰（美术三杰）                        米开朗基罗                            大卫                                大理石雕塑                            创世纪                                位于梵蒂冈西斯廷教堂的巨幅天顶画《创世纪》                        达芬奇                            蒙娜丽莎                                现收藏于法国卢浮宫博物馆的油画                            最后的晚餐                                非传统湿壁画，蛋彩画与油画的结合                        拉斐尔</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工业设计史 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日语N1笔记3</title>
      <link href="/2023/02/16/%E6%97%A5%E8%AF%ADN1%E7%AC%94%E8%AE%B03/"/>
      <url>/2023/02/16/%E6%97%A5%E8%AF%ADN1%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h2 id="日语N1笔记"><a href="#日语N1笔记" class="headerlink" title="日语N1笔记"></a>日语N1笔记</h2><img src="/img/riyu/riyu3.webp"><p>1、まみれ</p><p>1)事物的表面都沾着令人不舒服的东西</p><p>2)陷入某种不好的状态难以摆脱的样子</p><p>全身血まみれになった男性が、担架に乗せられて事故現場から運び出された。</p><p>借金まみれの生活から脱出するために、弁護士に相談しに行くことにした。</p><p>2、をよそに</p><p>一表示对于事物熟视无睹</p><p>二表示和事物没有关联（没有产生影响）</p><p>（常用于消极的场合）</p><p>①、教師の再三の注意をよそに、学生は授業中も携帯電話をいじっている。</p><p>②、恋人が泣いて引き止めるのをよそに、彼はカメラを携えて戦場に向かった。</p><p>3、N+なり</p><p>对应·····的立场或者能力水平</p><p>常用「なりに」「なりの」</p><p>①、あの子は幼いなりに親を助けようと、いろいろ努力している。</p><p>②、営業部は営業部なりに頑張っているんだろうが、売り上げはなかなか伸びていない。</p><p>③、人の言いなり放題になるのではなくて、自分なりの意見をもって行動せよ。</p><p>④、ききには、ききなりの悩みもあれば意見もある。（も+ば+も　既，又）</p><p>4、ないでもない　也不是不行</p><p>5、始末で　しまつで</p><p>一直发生不好的事情，最终导致了不好的结果有时会用于表示某人行为而使得说话人很不好办，感到麻烦的时候。</p><p>①、あの女は子供のころから嘘ばかりついていて、最後には詐欺で捕まるしまつだ。</p><p>②、一度相談に乗ってあげただけなのに、彼はあなただけが頼りだと言って、真夜中にでも</p><p>電話をかけてくる始末だった。</p><p>③、借金に借金を重ねたあげく、ついには夜逃げまでしでかす始末だ。（しでかす，做出了什么不好的事）</p><p>6、〜なり、〜なり</p><p>用法类似于「か」，表示例举说话人自己想到的例子，后面常常接意志表达</p><p>也可以使用单个「なり」进行特殊举例，类似于「でも」的用法。</p><p>①、目が悪いなら、眼鏡なりコンタクトなりすればいいのに。</p><p>②、今日は俺のおごりだから、牛丼なりカレーなり、好きに注文していいよ。</p><p>③、娘の海外留学については、私も父親として心配で経験者の方に相談するなりしたものです。</p><p>④、御用の際は何なりとお申し付けてください。（这句服务员经常用）</p><p>7、ずくめ</p><p>表示周围尽是同样的事物，或者持续出现同样的事情</p><p>常与「白、黒、いいこと、失敗、ごちそう、規則」搭配使用。</p><p>①、ご主人の昇進や娘さんの結婚など、山田さんの家はいいことずくめだ。</p><p>②、私の学校は規則ずくめで、息がつまりそうだ。</p><p>③、目撃者の証言によると、犯人は全身黒ずくめで銃を所持していたということです。</p><p>④、幸せずくめに見えた彼女にも、人知らぬ悩みがあったんだね。</p><p>“满是”三兄弟： ずくめ、だらけ、まみれ</p><p>①、ずくめ：可以接好的，积极的内容，いいことずくめ。</p><p>②、だらけ：描述事物数量之多，多用于负面的情况，苹果，水，错误，问题等。</p><p>③、まみれ：描述事物的表面占满了某种东西，以“水，油，灰尘，雪”等为主，也可以用于抽象表达。</p><p>8、にして</p><p>表示事物有着两个同样性质的状态或职业</p><p>①、彼は大学の教授にして、有名な作家でもある。</p><p>②、彼女のデザインする服は、どれも個性的にして実用的だと定評がある。</p><p>③、怪盗と呼ばれた男の犯行の手口は大胆にして、かつ繊細だった。</p><p>9、…はおろか　岂止</p><p>后一般接否定</p><p>10、すら 连…也…</p><p>基本等于さえ　常和「はおろか」搭配使用</p><p>①、仕事が忙しすぎて、昼休みすら満足に取れない。</p><p>②、本に夢中になって、夜が明けたことにすら気づかなかった。</p><p>③、スピーチに慣れた人ですら、話しはじめはどきどきするそうだ。 作者：神乃シズク <a href="https://www.bilibili.com/read/cv16170283?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv16170283?spm_id_from=333.999.0.0</a> 出处：bilibili</p>]]></content>
      
      
      <categories>
          
          <category> 日语N1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日语N1笔记2</title>
      <link href="/2023/02/16/%E6%97%A5%E8%AF%ADN1%E7%AC%94%E8%AE%B02/"/>
      <url>/2023/02/16/%E6%97%A5%E8%AF%ADN1%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h2 id="日语N1笔记"><a href="#日语N1笔记" class="headerlink" title="日语N1笔记"></a>日语N1笔记</h2><img src="/img/riyu/riyu2.webp"><p>1、に至っては　到了如此的地步（不好的方面）</p><p>事ここに至っては   事已至此</p><p>额外表示：</p><p>に至って　Aという状況になって、やっとＢになった</p><p>ストレスで病気になるという状況に至って、会社を辞めることを決意した．</p><p>に至っても　Aという状況になっても、まだ～。</p><p>2、といえども　就算是….也（不能按照事物自然呈现的状态或含义去判断）</p><p>雑草といえども、それぞれに名前がある</p><p>前面搭配：いくら、たとえ、いかに、いかなる</p><p>3、を余儀なくされる　不得不（受环境影响不得不，很正式，多用新闻）</p><p>Ｖ未然 + ざるを得ない</p><p>迫于某种压力而违心地做某事</p><p>4、たりとも</p><p>就算是…..(如此一个小数量)</p><p>一瞬たりとも、彼から目を離すな。動きがあれば報告せよ。</p><p>5、きらいがある　某种不好的倾向</p><p>6、次第</p><p>商务、会议情况下解释情况和理由 = んです</p><p>ＶＲ+次第 一…就 立刻 自然而然地进行认为行为</p><p>結果がおわかり次第、すぐ連絡致しますので、少々お待ちください．</p><p>Ｎ＋次第で　视。。而定 全凭</p><p>大学の試験に合格できるかどうかは、君の努力次第だ</p><p>7、をもって　以て  以…. 用…  正式场合 = でもって</p><p>身をもって体験することこそ</p><p>8、てやみません 表示长时间地持有某种思念或想法</p><p>常于「ねがう、祈る、期待する、望む」など</p><p> 作者：神乃シズク <a href="https://www.bilibili.com/read/cv16139602?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv16139602?spm_id_from=333.999.0.0</a> 出处：bilibili</p>]]></content>
      
      
      <categories>
          
          <category> 日语N1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日语N1笔记1</title>
      <link href="/2023/02/16/%E6%97%A5%E8%AF%ADN1%E7%AC%94%E8%AE%B01/"/>
      <url>/2023/02/16/%E6%97%A5%E8%AF%ADN1%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="日语N1笔记"><a href="#日语N1笔记" class="headerlink" title="日语N1笔记"></a>日语N1笔记</h2><img src="/img/riyu/riyu1.webp"><p>1、を皮切りに 以..为起点，发生了一系列类似的事情。</p><p>1）大型的イベント举办</p><p>    在上海开始举办了演唱会</p><p>    然后相继在东京广州深圳北京也举办了</p><p>2）事业的开端</p><p>3）以…为信号，开始了</p><p>4）以某种动作为起点进行了类似的互相行为 互骂，互相打架</p><p>    同类型：以什么为契机 をきっかけに</p><p>2、にわたって   什么….范围</p><p>    范围表达。长接在表示区间，场所,空间，数量的名词之后，表示某个事情是横跨，覆盖某个范围的，可以跟「から」进行搭配使用。</p><p>3、にあって 既定事实的因果表达</p><p>    由于客观显示导致事后的客观结果</p><p>特点：原因不常见</p><p>例如：</p><p>    鹿乃在我家门口开演唱会，人山人海√</p><p>    冷鸟握手会，这儿很多人√</p><p>    天很冷，大家穿棉袄×</p><p>    めったに聞けない彼の生演奏とあって、狭いクラブは満員になった</p><p>    大変珍しい、めったに</p><p>同类型：とあっては＝とあれば</p><p>    另类假定表达,用于假设,强调某种状态,表示在如此状态下会采取的行为,措施,会发生的状况。</p><p>    后者多为意志表达(记住,这是假定表达，即后者不会用到过去式来表示既定事实)</p><p>    あなたのためとあれば、たとえ火の中水の中、水の中、死ぬことだってできます．</p><p>4、ことから 原因</p><p>    重点：多用于命名（外号、科学名称）</p><p>5、ならではの</p><p>N+~+N  前者事物是后者独有的</p><p>N+~ない  只有他是独有的</p><p>同类型：あっての　有A才有的B 来源</p><p>神乃シズクあってのカッコ良さ。</p><p>6、にもまして　増すー＞まして</p><p>    用于比较,表示“比起前者更加”。前者是当然符合内容描述的,后者更为- ,强调后者的程度更高</p><p>一般和以前或者类似的自己进行比较</p><p>1）この山は桜の季節もいいが、それにもまして紅葉の頃が美しい。</p><p>7、はもとより　理所当然</p><p>8、に至るまで</p><p>    下至….（范围） 表述某个范围很大 常和「から」搭配</p><p>１）旅行中に買ったものからハンドバッグの中身に至るまで、厳しく調べられた。</p><p>9、Ｎからして</p><p>    以某个基本点为例子，表示这个事物整体如何</p><p>1）有名デパートの店員は、言葉遣いからして丁寧だ</p><p>2)グルメの友人は朝食のパンからして有名店の物を選ぶ。</p><p>3)あいつは言葉遣いからして生意気だ。 作者：神乃シズク </p>]]></content>
      
      
      <categories>
          
          <category> 日语N1 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>情人节快乐</title>
      <link href="/2023/02/15/%E6%83%85%E4%BA%BA%E8%8A%82%E5%BF%AB%E4%B9%90/"/>
      <url>/2023/02/15/%E6%83%85%E4%BA%BA%E8%8A%82%E5%BF%AB%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<h2 id="天天都过情人节"><a href="#天天都过情人节" class="headerlink" title="天天都过情人节"></a>天天都过情人节</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
